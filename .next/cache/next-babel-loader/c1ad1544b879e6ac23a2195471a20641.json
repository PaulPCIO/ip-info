{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/paulvandyk/Projects/Kenai/ipinfo/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { useState, useEffect } from 'react';\nexport default function TestApp() {\n  var _useState = useState('unset'),\n      ip = _useState[0],\n      setIp = _useState[1];\n\n  var _useState2 = useState(false),\n      fetching = _useState2[0],\n      setFetching = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      country = _useState3[0],\n      setCountry = _useState3[1];\n\n  useEffect(function () {\n    var handleFetchIp = function handleFetchIp() {\n      var res, _await$res$json, _ip;\n\n      return _regeneratorRuntime.async(function handleFetchIp$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch('https://api.ipify.org?format=json'));\n\n            case 2:\n              res = _context.sent;\n\n              if (!res.ok) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(res.json());\n\n            case 6:\n              _await$res$json = _context.sent;\n              _ip = _await$res$json.ip;\n              if (_ip) setIp(_ip);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    handleFetchIp();\n  }, []);\n\n  var handleGetCountry = function handleGetCountry() {\n    var res, data;\n    return _regeneratorRuntime.async(function handleGetCountry$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setFetching(true);\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"/api/\".concat(ip)));\n\n          case 3:\n            res = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 6:\n            data = _context2.sent;\n\n            if (data) {\n              debugger;\n              setCountry('Testing');\n            }\n\n            setFetching(false);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, \"IP: \", ip ? ip : 'unset'), country && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 19\n    }\n  }), __jsx(\"button\", {\n    disabled: fetching,\n    onClick: handleGetCountry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, fetching ? 'Fetching' : 'Get Country'));\n}","map":{"version":3,"sources":["/Users/paulvandyk/Projects/Kenai/ipinfo/pages/index.tsx"],"names":["fetch","useState","useEffect","TestApp","ip","setIp","fetching","setFetching","undefined","country","setCountry","handleFetchIp","res","ok","json","handleGetCountry","data"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA,kBACZF,QAAQ,CAAC,OAAD,CADI;AAAA,MACzBG,EADyB;AAAA,MACrBC,KADqB;;AAAA,mBAEAJ,QAAQ,CAAC,KAAD,CAFR;AAAA,MAEzBK,QAFyB;AAAA,MAEfC,WAFe;;AAAA,mBAGFN,QAAQ,CAAqBO,SAArB,CAHN;AAAA,MAGzBC,OAHyB;AAAA,MAGhBC,UAHgB;;AAKhCR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMS,aAAa,GAAG,SAAhBA,aAAgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACFX,KAAK,CAAC,mCAAD,CADH;;AAAA;AACdY,cAAAA,GADc;;AAAA,mBAEhBA,GAAG,CAACC,EAFY;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAGGD,GAAG,CAACE,IAAJ,EAHH;;AAAA;AAAA;AAGVV,cAAAA,GAHU,mBAGVA,EAHU;AAIlB,kBAAIA,GAAJ,EAAQC,KAAK,CAACD,GAAD,CAAL;;AAJU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAOAO,IAAAA,aAAa;AACd,GATQ,EASN,EATM,CAAT;;AAWA,MAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBR,YAAAA,WAAW,CAAC,IAAD,CAAX;AADuB;AAAA,6CAELP,KAAK,gBAASI,EAAT,EAFA;;AAAA;AAEjBQ,YAAAA,GAFiB;AAAA;AAAA,6CAGJA,GAAG,CAACE,IAAJ,EAHI;;AAAA;AAGjBE,YAAAA,IAHiB;;AAIvB,gBAAIA,IAAJ,EAAU;AACR;AACAN,cAAAA,UAAU,CAAC,SAAD,CAAV;AACD;;AACDH,YAAAA,WAAW,CAAC,KAAD,CAAX;;AARuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAWA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAUH,EAAE,GAAGA,EAAH,GAAQ,OAApB,CADF,EAEGK,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFd,EAGE;AAAQ,IAAA,QAAQ,EAAEH,QAAlB;AAA4B,IAAA,OAAO,EAAES,gBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,QAAQ,GAAG,UAAH,GAAgB,aAD3B,CAHF,CADF;AASD","sourcesContent":["import fetch from 'isomorphic-unfetch'\nimport { useState, useEffect } from 'react'\n\nexport default function TestApp() {\n  const [ip, setIp] = useState('unset')\n  const [fetching, setFetching] = useState(false)\n  const [country, setCountry] = useState<string | undefined>(undefined)\n\n  useEffect(() => {\n    const handleFetchIp = async () => {\n      const res = await fetch('https://api.ipify.org?format=json')\n      if (res.ok) {\n        const { ip } = await res.json()\n        if (ip) setIp(ip)\n      }\n    }\n    handleFetchIp()\n  }, [])\n\n  const handleGetCountry = async () => {\n    setFetching(true)\n    const res = await fetch(`/api/${ip}`)\n    const data = await res.json()\n    if (data) {\n      debugger\n      setCountry('Testing')\n    }\n    setFetching(false)\n  }\n\n  return (\n    <div>\n      <div>IP: {ip ? ip : 'unset'}</div>\n      {country && <div></div>}\n      <button disabled={fetching} onClick={handleGetCountry}>\n        {fetching ? 'Fetching' : 'Get Country'}\n      </button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}