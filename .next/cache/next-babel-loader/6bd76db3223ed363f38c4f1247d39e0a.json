{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nconst apiKey = 'e4bd1590-a940-47b3-b705-91ea25395c14';\n\nfunction validIP(ip) {\n  const ipArr = ip.split('.');\n  let valid = true;\n  if (ipArr.length !== 4) return false;\n  ipArr.forEach(item => {\n    const itemNum = parseInt(item);\n    if (!itemNum) valid = false;else if (itemNum < 0 || itemNum > 255) valid = false;\n  });\n  return valid;\n}\n\nexport default (async (req, res) => {\n  try {\n    console.log(req.headers);\n    const ip = req.query.ip;\n    if (!ip || !validIP(ip)) throw new Error('Invalid ip address');\n    const response = await fetch(`https://freegeoip.app/json/${ip}`, {\n      method: 'get',\n      headers: {\n        accept: 'application/json' // 'x-auth-token': apiKey,\n\n      }\n    });\n    if (!response.ok) throw new Error('API error');\n    const data = await response.json();\n    return res.status(200).json(data);\n  } catch (error) {\n    // console.log(error)\n    return res.status(401).json({\n      message: error.message\n    });\n  }\n});","map":{"version":3,"sources":["/Users/paulvandyk/Projects/Kenai/ipinfo/pages/api/[ip].ts"],"names":["fetch","apiKey","validIP","ip","ipArr","split","valid","length","forEach","item","itemNum","parseInt","req","res","console","log","headers","query","Error","response","method","accept","ok","data","json","status","error","message"],"mappings":"AACA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,MAAMC,MAAM,GAAG,sCAAf;;AAEA,SAASC,OAAT,CAAiBC,EAAjB,EAA6B;AAC3B,QAAMC,KAAK,GAAGD,EAAE,CAACE,KAAH,CAAS,GAAT,CAAd;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIF,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB,OAAO,KAAP;AACxBH,EAAAA,KAAK,CAACI,OAAN,CAAeC,IAAD,IAAU;AACtB,UAAMC,OAAO,GAAGC,QAAQ,CAACF,IAAD,CAAxB;AACA,QAAI,CAACC,OAAL,EAAcJ,KAAK,GAAG,KAAR,CAAd,KACK,IAAII,OAAO,GAAG,CAAV,IAAeA,OAAO,GAAG,GAA7B,EAAkCJ,KAAK,GAAG,KAAR;AACxC,GAJD;AAKA,SAAOA,KAAP;AACD;;AAED,gBAAe,OAAOM,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,OAAhB;AACA,UAAMb,EAAE,GAAGS,GAAG,CAACK,KAAJ,CAAUd,EAArB;AACA,QAAI,CAACA,EAAD,IAAO,CAACD,OAAO,CAACC,EAAD,CAAnB,EAAyB,MAAM,IAAIe,KAAJ,CAAU,oBAAV,CAAN;AACzB,UAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAAE,8BAA6BG,EAAG,EAAlC,EAAqC;AAC/DiB,MAAAA,MAAM,EAAE,KADuD;AAE/DJ,MAAAA,OAAO,EAAE;AACPK,QAAAA,MAAM,EAAE,kBADD,CAEP;;AAFO;AAFsD,KAArC,CAA5B;AAOA,QAAI,CAACF,QAAQ,CAACG,EAAd,EAAkB,MAAM,IAAIJ,KAAJ,CAAU,WAAV,CAAN;AAClB,UAAMK,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,WAAOX,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqBD,IAArB,CAAP;AACD,GAdD,CAcE,OAAOG,KAAP,EAAc;AACd;AACA,WAAOb,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEG,MAAAA,OAAO,EAAED,KAAK,CAACC;AAAjB,KAArB,CAAP;AACD;AACF,CAnBD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport fetch from 'isomorphic-unfetch'\n\nconst apiKey = 'e4bd1590-a940-47b3-b705-91ea25395c14'\n\nfunction validIP(ip: string) {\n  const ipArr = ip.split('.')\n  let valid = true\n  if (ipArr.length !== 4) return false\n  ipArr.forEach((item) => {\n    const itemNum = parseInt(item)\n    if (!itemNum) valid = false\n    else if (itemNum < 0 || itemNum > 255) valid = false\n  })\n  return valid\n}\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  try {\n    console.log(req.headers)\n    const ip = req.query.ip as string\n    if (!ip || !validIP(ip)) throw new Error('Invalid ip address')\n    const response = await fetch(`https://freegeoip.app/json/${ip}`, {\n      method: 'get',\n      headers: {\n        accept: 'application/json',\n        // 'x-auth-token': apiKey,\n      },\n    })\n    if (!response.ok) throw new Error('API error')\n    const data = await response.json()\n    return res.status(200).json(data)\n  } catch (error) {\n    // console.log(error)\n    return res.status(401).json({ message: error.message })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}