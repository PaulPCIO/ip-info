{"ast":null,"code":"var _jsxFileName = \"/Users/paulvandyk/Projects/Kenai/ipinfo/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { useState } from 'react';\n\nconst TestApp = ({\n  ip\n}) => {\n  //   const [ip, setIp] = useState('')\n  const {\n    0: fetching,\n    1: setFetching\n  } = useState(false);\n  const {\n    0: country,\n    1: setCountry\n  } = useState(undefined); //   useEffect(() => {\n  //     const handleFetchIp = async () => {\n  //       const res = await fetch('https://api.ipify.org?format=json')\n  //       if (res.ok) {\n  //         const { ip } = await res.json()\n  //         if (ip) setIp(ip)\n  //       }\n  //     }\n  //     handleFetchIp()\n  //   }, [])\n\n  const handleGetCountry = async () => {\n    setFetching(true);\n    const res = await fetch(`/api/${ip}`);\n    const data = await res.json();\n\n    if (data) {\n      console.log(data);\n      setCountry(data.country_name);\n    }\n\n    setFetching(false);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"IP: \", ip ? ip : ''), country && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 19\n    }\n  }, \"Country: \", country), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), ip && __jsx(\"button\", {\n    disabled: fetching,\n    onClick: handleGetCountry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, fetching ? 'Fetching' : 'Get Country'));\n};\n\nTestApp.getInitialProps = async ({\n  req,\n  res\n}) => {\n  const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n  res.setHeader('Content-Type', 'application/json');\n  res.send({\n    ip\n  }); //   return { ip }\n};\n\nexport default TestApp;","map":{"version":3,"sources":["/Users/paulvandyk/Projects/Kenai/ipinfo/pages/index.tsx"],"names":["fetch","useState","TestApp","ip","fetching","setFetching","country","setCountry","undefined","handleGetCountry","res","data","json","console","log","country_name","getInitialProps","req","headers","connection","remoteAddress","setHeader","send"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,QAAT,QAAoC,OAApC;;AAGA,MAAMC,OAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AACzC;AACA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BJ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACK,OAAD;AAAA,OAAUC;AAAV,MAAwBN,QAAQ,CAAqBO,SAArB,CAAtC,CAHyC,CAKzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,gBAAgB,GAAG,YAAY;AACnCJ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACA,UAAMK,GAAG,GAAG,MAAMV,KAAK,CAAE,QAAOG,EAAG,EAAZ,CAAvB;AACA,UAAMQ,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;;AACA,QAAID,IAAJ,EAAU;AACRE,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAJ,MAAAA,UAAU,CAACI,IAAI,CAACI,YAAN,CAAV;AACD;;AACDV,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GATD;;AAWA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAUF,EAAE,GAAGA,EAAH,GAAQ,EAApB,CADF,EAEGG,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAeA,OAAf,CAFd,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIGH,EAAE,IACD;AAAQ,IAAA,QAAQ,EAAEC,QAAlB;AAA4B,IAAA,OAAO,EAAEK,gBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,QAAQ,GAAG,UAAH,GAAgB,aAD3B,CALJ,CADF;AAYD,CAvCD;;AA8CAF,OAAO,CAACc,eAAR,GAA0B,OAAO;AAAEC,EAAAA,GAAF;AAAOP,EAAAA;AAAP,CAAP,KAAqC;AAC7D,QAAMP,EAAE,GAAGc,GAAG,CAACC,OAAJ,CAAY,iBAAZ,KAAkCD,GAAG,CAACE,UAAJ,CAAeC,aAA5D;AACAV,EAAAA,GAAG,CAACW,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAX,EAAAA,GAAG,CAACY,IAAJ,CAAS;AAAEnB,IAAAA;AAAF,GAAT,EAH6D,CAI7D;AACD,CALD;;AAOA,eAAeD,OAAf","sourcesContent":["import fetch from 'isomorphic-unfetch'\nimport { useState, useEffect } from 'react'\nimport { NextPage, NextPageContext, NextApiRequest, NextApiResponse } from 'next'\n\nconst TestApp: NextPage<any> = ({ ip }) => {\n  //   const [ip, setIp] = useState('')\n  const [fetching, setFetching] = useState(false)\n  const [country, setCountry] = useState<string | undefined>(undefined)\n\n  //   useEffect(() => {\n  //     const handleFetchIp = async () => {\n  //       const res = await fetch('https://api.ipify.org?format=json')\n  //       if (res.ok) {\n  //         const { ip } = await res.json()\n  //         if (ip) setIp(ip)\n  //       }\n  //     }\n  //     handleFetchIp()\n  //   }, [])\n\n  const handleGetCountry = async () => {\n    setFetching(true)\n    const res = await fetch(`/api/${ip}`)\n    const data = await res.json()\n    if (data) {\n      console.log(data)\n      setCountry(data.country_name)\n    }\n    setFetching(false)\n  }\n\n  return (\n    <div>\n      <div>IP: {ip ? ip : ''}</div>\n      {country && <div>Country: {country}</div>}\n      <br />\n      {ip && (\n        <button disabled={fetching} onClick={handleGetCountry}>\n          {fetching ? 'Fetching' : 'Get Country'}\n        </button>\n      )}\n    </div>\n  )\n}\n\ninterface PageContext extends NextPageContext {\n  req: NextApiRequest\n  res: NextApiResponse\n}\n\nTestApp.getInitialProps = async ({ req, res }: PageContext) => {\n  const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress\n  res.setHeader('Content-Type', 'application/json')\n  res.send({ ip })\n  //   return { ip }\n}\n\nexport default TestApp\n"]},"metadata":{},"sourceType":"module"}