{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nconst apiKey = 'e4bd1590-a940-47b3-b705-91ea25395c14';\nexport default (async (req, res) => {\n  try {\n    const ipString = req.query.ip;\n    const ip = parseInt(ipString);\n    if (!ip || ip >= 0 && ip <= 255) throw new Error('Invalid ip address');\n    const response = await fetch(`https://signals.api.auth0.com/v2.0/ip/${ip}`, {\n      method: 'get',\n      headers: {\n        'X-Auth-Token': apiKey\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n    return res.status(200).json(data);\n  } catch (error) {\n    console.log(error);\n    return res.status(401).json({\n      message: error.message\n    });\n  }\n});","map":{"version":3,"sources":["/Users/paulvandyk/Projects/Kenai/ipinfo/pages/api/[ip].ts"],"names":["fetch","apiKey","req","res","ipString","query","ip","parseInt","Error","response","method","headers","data","json","console","log","status","error","message"],"mappings":"AACA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,MAAMC,MAAM,GAAG,sCAAf;AAEA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAI;AACF,UAAMC,QAAQ,GAAGF,GAAG,CAACG,KAAJ,CAAUC,EAA3B;AACA,UAAMA,EAAE,GAAGC,QAAQ,CAACH,QAAD,CAAnB;AACA,QAAI,CAACE,EAAD,IAAQA,EAAE,IAAI,CAAN,IAAWA,EAAE,IAAI,GAA7B,EAAmC,MAAM,IAAIE,KAAJ,CAAU,oBAAV,CAAN;AACnC,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAAE,yCAAwCM,EAAG,EAA7C,EAAgD;AAC1EI,MAAAA,MAAM,EAAE,KADkE;AAE1EC,MAAAA,OAAO,EAAE;AAAE,wBAAgBV;AAAlB;AAFiE,KAAhD,CAA5B;AAIA,UAAMW,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,WAAOT,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqBD,IAArB,CAAP;AACD,GAXD,CAWE,OAAOK,KAAP,EAAc;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,WAAOd,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEK,MAAAA,OAAO,EAAED,KAAK,CAACC;AAAjB,KAArB,CAAP;AACD;AACF,CAhBD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport fetch from 'isomorphic-unfetch'\n\nconst apiKey = 'e4bd1590-a940-47b3-b705-91ea25395c14'\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  try {\n    const ipString = req.query.ip as string\n    const ip = parseInt(ipString)\n    if (!ip || (ip >= 0 && ip <= 255)) throw new Error('Invalid ip address')\n    const response = await fetch(`https://signals.api.auth0.com/v2.0/ip/${ip}`, {\n      method: 'get',\n      headers: { 'X-Auth-Token': apiKey },\n    })\n    const data = await response.json()\n    console.log(data)\n    return res.status(200).json(data)\n  } catch (error) {\n    console.log(error)\n    return res.status(401).json({ message: error.message })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}