{"ast":null,"code":"export default (async (req, res) => {\n  try {\n    console.log(req);\n    res.status(200).json(example);\n  } catch (error) {\n    res.status(502).send(error.message);\n  }\n});\nconst example = {\n  ip: '82.252.135.59',\n  hostname: 'lns-bzn-59-82-252-135-59.adsl.proxad.net',\n  city: 'Paris',\n  region: 'Île-de-France',\n  country: 'FR',\n  loc: '48.8648,2.3335',\n  postal: '75008',\n  timezone: 'Europe/Paris',\n  asn: {\n    asn: 'AS12322',\n    name: 'Free SAS',\n    domain: 'free.fr',\n    route: '82.240.0.0/12',\n    type: 'isp'\n  },\n  asn: 'AS12322',\n  name: 'Free SAS',\n  domain: 'free.fr',\n  route: '82.240.0.0/12',\n  type: 'isp',\n  hosting: {\n    host: 'proxad',\n    id: 'FR-PROXAD-ADSL',\n    name: 'Proxad / Free SAS',\n    network: '82.248.0.0/13'\n  },\n  host: 'proxad',\n  id: 'FR-PROXAD-ADSL',\n  name: 'Proxad / Free SAS',\n  network: '82.248.0.0/13',\n  company: {\n    name: 'Proxad / Free SAS',\n    domain: 'free.fr',\n    type: 'isp'\n  },\n  name: 'Proxad / Free SAS',\n  domain: 'free.fr',\n  type: 'isp',\n  privacy: {\n    vpn: false,\n    proxy: false,\n    tor: false,\n    hosting: false\n  },\n  vpn: false,\n  proxy: false,\n  tor: false,\n  hosting: false,\n  abuse: {\n    address: '',\n    country: 'FR',\n    email: 'abuse@proxad.net',\n    name: 'Administrative Contact for ProXad',\n    network: '82.248.0.0/13',\n    phone: ''\n  },\n  address: '',\n  country: 'FR',\n  email: 'abuse@proxad.net',\n  name: 'Administrative Contact for ProXad',\n  network: '82.248.0.0/13',\n  phone: ''\n};","map":{"version":3,"sources":["/Users/paulvandyk/Projects/Kenai/ipinfo/pages/api/index.ts"],"names":["req","res","console","log","status","json","example","error","send","message","ip","hostname","city","region","country","loc","postal","timezone","asn","name","domain","route","type","hosting","host","id","network","company","privacy","vpn","proxy","tor","abuse","address","email","phone"],"mappings":"AAEA,gBAAe,OAAOA,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAC,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,OAArB;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACdN,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBI,IAAhB,CAAqBD,KAAK,CAACE,OAA3B;AACD;AACF,CAPD;AASA,MAAMH,OAAO,GAAG;AACdI,EAAAA,EAAE,EAAE,eADU;AAEdC,EAAAA,QAAQ,EAAE,0CAFI;AAGdC,EAAAA,IAAI,EAAE,OAHQ;AAIdC,EAAAA,MAAM,EAAE,eAJM;AAKdC,EAAAA,OAAO,EAAE,IALK;AAMdC,EAAAA,GAAG,EAAE,gBANS;AAOdC,EAAAA,MAAM,EAAE,OAPM;AAQdC,EAAAA,QAAQ,EAAE,cARI;AASdC,EAAAA,GAAG,EAAE;AACHA,IAAAA,GAAG,EAAE,SADF;AAEHC,IAAAA,IAAI,EAAE,UAFH;AAGHC,IAAAA,MAAM,EAAE,SAHL;AAIHC,IAAAA,KAAK,EAAE,eAJJ;AAKHC,IAAAA,IAAI,EAAE;AALH,GATS;AAgBdJ,EAAAA,GAAG,EAAE,SAhBS;AAiBdC,EAAAA,IAAI,EAAE,UAjBQ;AAkBdC,EAAAA,MAAM,EAAE,SAlBM;AAmBdC,EAAAA,KAAK,EAAE,eAnBO;AAoBdC,EAAAA,IAAI,EAAE,KApBQ;AAqBdC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,QADC;AAEPC,IAAAA,EAAE,EAAE,gBAFG;AAGPN,IAAAA,IAAI,EAAE,mBAHC;AAIPO,IAAAA,OAAO,EAAE;AAJF,GArBK;AA2BdF,EAAAA,IAAI,EAAE,QA3BQ;AA4BdC,EAAAA,EAAE,EAAE,gBA5BU;AA6BdN,EAAAA,IAAI,EAAE,mBA7BQ;AA8BdO,EAAAA,OAAO,EAAE,eA9BK;AA+BdC,EAAAA,OAAO,EAAE;AACPR,IAAAA,IAAI,EAAE,mBADC;AAEPC,IAAAA,MAAM,EAAE,SAFD;AAGPE,IAAAA,IAAI,EAAE;AAHC,GA/BK;AAoCdH,EAAAA,IAAI,EAAE,mBApCQ;AAqCdC,EAAAA,MAAM,EAAE,SArCM;AAsCdE,EAAAA,IAAI,EAAE,KAtCQ;AAuCdM,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE,KADE;AAEPC,IAAAA,KAAK,EAAE,KAFA;AAGPC,IAAAA,GAAG,EAAE,KAHE;AAIPR,IAAAA,OAAO,EAAE;AAJF,GAvCK;AA6CdM,EAAAA,GAAG,EAAE,KA7CS;AA8CdC,EAAAA,KAAK,EAAE,KA9CO;AA+CdC,EAAAA,GAAG,EAAE,KA/CS;AAgDdR,EAAAA,OAAO,EAAE,KAhDK;AAiDdS,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAE,EADJ;AAELnB,IAAAA,OAAO,EAAE,IAFJ;AAGLoB,IAAAA,KAAK,EAAE,kBAHF;AAILf,IAAAA,IAAI,EAAE,mCAJD;AAKLO,IAAAA,OAAO,EAAE,eALJ;AAMLS,IAAAA,KAAK,EAAE;AANF,GAjDO;AAyDdF,EAAAA,OAAO,EAAE,EAzDK;AA0DdnB,EAAAA,OAAO,EAAE,IA1DK;AA2DdoB,EAAAA,KAAK,EAAE,kBA3DO;AA4Ddf,EAAAA,IAAI,EAAE,mCA5DQ;AA6DdO,EAAAA,OAAO,EAAE,eA7DK;AA8DdS,EAAAA,KAAK,EAAE;AA9DO,CAAhB","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  try {\n    console.log(req)\n    res.status(200).json(example)\n  } catch (error) {\n    res.status(502).send(error.message)\n  }\n}\n\nconst example = {\n  ip: '82.252.135.59',\n  hostname: 'lns-bzn-59-82-252-135-59.adsl.proxad.net',\n  city: 'Paris',\n  region: 'Île-de-France',\n  country: 'FR',\n  loc: '48.8648,2.3335',\n  postal: '75008',\n  timezone: 'Europe/Paris',\n  asn: {\n    asn: 'AS12322',\n    name: 'Free SAS',\n    domain: 'free.fr',\n    route: '82.240.0.0/12',\n    type: 'isp',\n  },\n  asn: 'AS12322',\n  name: 'Free SAS',\n  domain: 'free.fr',\n  route: '82.240.0.0/12',\n  type: 'isp',\n  hosting: {\n    host: 'proxad',\n    id: 'FR-PROXAD-ADSL',\n    name: 'Proxad / Free SAS',\n    network: '82.248.0.0/13',\n  },\n  host: 'proxad',\n  id: 'FR-PROXAD-ADSL',\n  name: 'Proxad / Free SAS',\n  network: '82.248.0.0/13',\n  company: {\n    name: 'Proxad / Free SAS',\n    domain: 'free.fr',\n    type: 'isp',\n  },\n  name: 'Proxad / Free SAS',\n  domain: 'free.fr',\n  type: 'isp',\n  privacy: {\n    vpn: false,\n    proxy: false,\n    tor: false,\n    hosting: false,\n  },\n  vpn: false,\n  proxy: false,\n  tor: false,\n  hosting: false,\n  abuse: {\n    address: '',\n    country: 'FR',\n    email: 'abuse@proxad.net',\n    name: 'Administrative Contact for ProXad',\n    network: '82.248.0.0/13',\n    phone: '',\n  },\n  address: '',\n  country: 'FR',\n  email: 'abuse@proxad.net',\n  name: 'Administrative Contact for ProXad',\n  network: '82.248.0.0/13',\n  phone: '',\n}\n"]},"metadata":{},"sourceType":"module"}