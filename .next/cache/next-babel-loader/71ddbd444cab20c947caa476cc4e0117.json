{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport fetch from 'isomorphic-unfetch';\n\nvar App = function App() {\n  return null;\n};\n\nApp.getInitialProps = function _callee(_ref) {\n  var req, res, ip, response, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          req = _ref.req, res = _ref.res;\n          res.setHeader('Content-Type', 'application/json');\n          _context.prev = 2;\n          ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n\n          if (ip) {\n            _context.next = 6;\n            break;\n          }\n\n          throw new Error('API error');\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(fetch(\"https://freegeoip.app/json/\".concat(ip), {\n            method: 'get',\n            headers: {\n              accept: 'application/json' // 'x-auth-token': apiKey,\n\n            }\n          }));\n\n        case 8:\n          response = _context.sent;\n\n          if (response.ok) {\n            _context.next = 11;\n            break;\n          }\n\n          throw new Error('API error');\n\n        case 11:\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 13:\n          data = _context.sent;\n          res.write(JSON.stringify(data));\n          res.end();\n          _context.next = 22;\n          break;\n\n        case 18:\n          _context.prev = 18;\n          _context.t0 = _context[\"catch\"](2);\n          res.write(JSON.stringify({\n            message: _context.t0.message\n          }));\n          res.end();\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 18]], Promise);\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/paulvandyk/Projects/Kenai/ipinfo/pages/index.tsx"],"names":["fetch","App","getInitialProps","req","res","setHeader","ip","headers","connection","remoteAddress","Error","method","accept","response","ok","json","data","write","JSON","stringify","end","message"],"mappings":";AACA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,GAAa,GAAG,SAAhBA,GAAgB;AAAA,SAAM,IAAN;AAAA,CAAtB;;AAOAA,GAAG,CAACC,eAAJ,GAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,GAAT,QAASA,GAAT,EAAcC,GAAd,QAAcA,GAAd;AACpBA,UAAAA,GAAG,CAACC,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AADoB;AAGZC,UAAAA,EAHY,GAGPH,GAAG,CAACI,OAAJ,CAAY,iBAAZ,KAAkCJ,GAAG,CAACK,UAAJ,CAAeC,aAH1C;;AAAA,cAIbH,EAJa;AAAA;AAAA;AAAA;;AAAA,gBAIH,IAAII,KAAJ,CAAU,WAAV,CAJG;;AAAA;AAAA;AAAA,2CAKKV,KAAK,sCAA+BM,EAA/B,GAAqC;AAC/DK,YAAAA,MAAM,EAAE,KADuD;AAE/DJ,YAAAA,OAAO,EAAE;AACPK,cAAAA,MAAM,EAAE,kBADD,CAEP;;AAFO;AAFsD,WAArC,CALV;;AAAA;AAKZC,UAAAA,QALY;;AAAA,cAYbA,QAAQ,CAACC,EAZI;AAAA;AAAA;AAAA;;AAAA,gBAYM,IAAIJ,KAAJ,CAAU,WAAV,CAZN;;AAAA;AAAA;AAAA,2CAaCG,QAAQ,CAACE,IAAT,EAbD;;AAAA;AAaZC,UAAAA,IAbY;AAclBZ,UAAAA,GAAG,CAACa,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAV;AACAZ,UAAAA,GAAG,CAACgB,GAAJ;AAfkB;AAAA;;AAAA;AAAA;AAAA;AAiBlBhB,UAAAA,GAAG,CAACa,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAe;AAAEE,YAAAA,OAAO,EAAE,YAAMA;AAAjB,WAAf,CAAV;AACAjB,UAAAA,GAAG,CAACgB,GAAJ;;AAlBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;;AAsBA,eAAenB,GAAf","sourcesContent":["import { NextPage, NextPageContext, NextApiRequest, NextApiResponse } from 'next'\nimport fetch from 'isomorphic-unfetch'\n\nconst App: NextPage = () => null\n\ninterface PageContext extends NextPageContext {\n  req: NextApiRequest\n  res: NextApiResponse\n}\n\nApp.getInitialProps = async ({ req, res }: PageContext) => {\n  res.setHeader('Content-Type', 'application/json')\n  try {\n    const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress\n    if (!ip) throw new Error('API error')\n    const response = await fetch(`https://freegeoip.app/json/${ip}`, {\n      method: 'get',\n      headers: {\n        accept: 'application/json',\n        // 'x-auth-token': apiKey,\n      },\n    })\n    if (!response.ok) throw new Error('API error')\n    const data = await response.json()\n    res.write(JSON.stringify(data))\n    res.end()\n  } catch (error) {\n    res.write(JSON.stringify({ message: error.message }))\n    res.end()\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}