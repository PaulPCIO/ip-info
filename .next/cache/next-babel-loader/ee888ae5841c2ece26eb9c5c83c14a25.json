{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\n\nconst InfoAPI = () => null;\n\nInfoAPI.getInitialProps = async ({\n  req,\n  res\n}) => {\n  res.setHeader('Content-Type', 'application/json');\n\n  try {\n    const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n    if (!ip) throw new Error('API error');\n    const response = await fetch(`https://freegeoip.app/json/${ip}`, {\n      method: 'get',\n      headers: {\n        accept: 'application/json' // 'x-auth-token': apiKey,\n\n      }\n    });\n    if (!response.ok) throw new Error('API error');\n    const data = await response.json();\n    res.write(JSON.stringify(data));\n    res.end();\n  } catch (error) {\n    res.write(JSON.stringify({\n      message: error.message\n    }));\n    res.end();\n  }\n};\n\nexport default InfoAPI;","map":{"version":3,"sources":["/Users/paulvandyk/Projects/Kenai/ipinfo/pages/index.tsx"],"names":["fetch","InfoAPI","getInitialProps","req","res","setHeader","ip","headers","connection","remoteAddress","Error","response","method","accept","ok","data","json","write","JSON","stringify","end","error","message"],"mappings":"AACA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,OAAiB,GAAG,MAAM,IAAhC;;AAMAA,OAAO,CAACC,eAAR,GAA0B,OAAO;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAP,KAAqC;AAC7DA,EAAAA,GAAG,CAACC,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;;AACA,MAAI;AACF,UAAMC,EAAE,GAAGH,GAAG,CAACI,OAAJ,CAAY,iBAAZ,KAAkCJ,GAAG,CAACK,UAAJ,CAAeC,aAA5D;AACA,QAAI,CAACH,EAAL,EAAS,MAAM,IAAII,KAAJ,CAAU,WAAV,CAAN;AACT,UAAMC,QAAQ,GAAG,MAAMX,KAAK,CAAE,8BAA6BM,EAAG,EAAlC,EAAqC;AAC/DM,MAAAA,MAAM,EAAE,KADuD;AAE/DL,MAAAA,OAAO,EAAE;AACPM,QAAAA,MAAM,EAAE,kBADD,CAEP;;AAFO;AAFsD,KAArC,CAA5B;AAOA,QAAI,CAACF,QAAQ,CAACG,EAAd,EAAkB,MAAM,IAAIJ,KAAJ,CAAU,WAAV,CAAN;AAClB,UAAMK,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAZ,IAAAA,GAAG,CAACa,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAV;AACAX,IAAAA,GAAG,CAACgB,GAAJ;AACD,GAdD,CAcE,OAAOC,KAAP,EAAc;AACdjB,IAAAA,GAAG,CAACa,KAAJ,CAAUC,IAAI,CAACC,SAAL,CAAe;AAAEG,MAAAA,OAAO,EAAED,KAAK,CAACC;AAAjB,KAAf,CAAV;AACAlB,IAAAA,GAAG,CAACgB,GAAJ;AACD;AACF,CApBD;;AAsBA,eAAenB,OAAf","sourcesContent":["import { NextPage, NextPageContext, NextApiRequest, NextApiResponse } from 'next'\nimport fetch from 'isomorphic-unfetch'\n\nconst InfoAPI: NextPage = () => null\ninterface PageContext extends NextPageContext {\n  req: NextApiRequest\n  res: NextApiResponse\n}\n\nInfoAPI.getInitialProps = async ({ req, res }: PageContext) => {\n  res.setHeader('Content-Type', 'application/json')\n  try {\n    const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress\n    if (!ip) throw new Error('API error')\n    const response = await fetch(`https://freegeoip.app/json/${ip}`, {\n      method: 'get',\n      headers: {\n        accept: 'application/json',\n        // 'x-auth-token': apiKey,\n      },\n    })\n    if (!response.ok) throw new Error('API error')\n    const data = await response.json()\n    res.write(JSON.stringify(data))\n    res.end()\n  } catch (error) {\n    res.write(JSON.stringify({ message: error.message }))\n    res.end()\n  }\n}\n\nexport default InfoAPI\n"]},"metadata":{},"sourceType":"module"}