{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/paulvandyk/Projects/Kenai/ipinfo/pages/index.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { useState } from 'react';\n\nvar TestApp = function TestApp(_ref) {\n  var ip = _ref.ip;\n\n  //   const [ip, setIp] = useState('')\n  var _useState = useState(false),\n      fetching = _useState[0],\n      setFetching = _useState[1];\n\n  var _useState2 = useState(undefined),\n      country = _useState2[0],\n      setCountry = _useState2[1]; //   useEffect(() => {\n  //     const handleFetchIp = async () => {\n  //       const res = await fetch('https://api.ipify.org?format=json')\n  //       if (res.ok) {\n  //         const { ip } = await res.json()\n  //         if (ip) setIp(ip)\n  //       }\n  //     }\n  //     handleFetchIp()\n  //   }, [])\n\n\n  var handleGetCountry = function handleGetCountry() {\n    var res, data;\n    return _regeneratorRuntime.async(function handleGetCountry$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setFetching(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"/api/\".concat(ip)));\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 6:\n            data = _context.sent;\n\n            if (data) {\n              console.log(data);\n              setCountry(data.country_name);\n            }\n\n            setFetching(false);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"IP: \", ip ? ip : ''), country && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 19\n    }\n  }, \"Country: \", country), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), ip && __jsx(\"button\", {\n    disabled: fetching,\n    onClick: handleGetCountry,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, fetching ? 'Fetching' : 'Get Country'));\n};\n\nTestApp.getInitialProps = function _callee(_ref2) {\n  var req, res, ip;\n  return _regeneratorRuntime.async(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          req = _ref2.req, res = _ref2.res;\n          ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n          return _context2.abrupt(\"return\", {\n            ip: ip\n          });\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default TestApp;","map":{"version":3,"sources":["/Users/paulvandyk/Projects/Kenai/ipinfo/pages/index.tsx"],"names":["fetch","useState","TestApp","ip","fetching","setFetching","undefined","country","setCountry","handleGetCountry","res","json","data","console","log","country_name","getInitialProps","req","headers","connection","remoteAddress"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,QAAT,QAAoC,OAApC;;AAGA,IAAMC,OAAsB,GAAG,SAAzBA,OAAyB,OAAY;AAAA,MAATC,EAAS,QAATA,EAAS;;AACzC;AADyC,kBAETF,QAAQ,CAAC,KAAD,CAFC;AAAA,MAElCG,QAFkC;AAAA,MAExBC,WAFwB;;AAAA,mBAGXJ,QAAQ,CAAqBK,SAArB,CAHG;AAAA,MAGlCC,OAHkC;AAAA,MAGzBC,UAHyB,kBAKzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBJ,YAAAA,WAAW,CAAC,IAAD,CAAX;AADuB;AAAA,6CAELL,KAAK,gBAASG,EAAT,EAFA;;AAAA;AAEjBO,YAAAA,GAFiB;AAAA;AAAA,6CAGJA,GAAG,CAACC,IAAJ,EAHI;;AAAA;AAGjBC,YAAAA,IAHiB;;AAIvB,gBAAIA,IAAJ,EAAU;AACRC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAJ,cAAAA,UAAU,CAACI,IAAI,CAACG,YAAN,CAAV;AACD;;AACDV,YAAAA,WAAW,CAAC,KAAD,CAAX;;AARuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAWA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAUF,EAAE,GAAGA,EAAH,GAAQ,EAApB,CADF,EAEGI,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAeA,OAAf,CAFd,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIGJ,EAAE,IACD;AAAQ,IAAA,QAAQ,EAAEC,QAAlB;AAA4B,IAAA,OAAO,EAAEK,gBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,QAAQ,GAAG,UAAH,GAAgB,aAD3B,CALJ,CADF;AAYD,CAvCD;;AA8CAF,OAAO,CAACc,eAAR,GAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,GAAT,SAASA,GAAT,EAAcP,GAAd,SAAcA,GAAd;AAClBP,UAAAA,EADkB,GACbc,GAAG,CAACC,OAAJ,CAAY,iBAAZ,KAAkCD,GAAG,CAACE,UAAJ,CAAeC,aADpC;AAAA,4CAGjB;AAAEjB,YAAAA,EAAE,EAAFA;AAAF,WAHiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAMA,eAAeD,OAAf","sourcesContent":["import fetch from 'isomorphic-unfetch'\nimport { useState, useEffect } from 'react'\nimport { NextPage, NextPageContext, NextApiRequest, NextApiResponse } from 'next'\n\nconst TestApp: NextPage<any> = ({ ip }) => {\n  //   const [ip, setIp] = useState('')\n  const [fetching, setFetching] = useState(false)\n  const [country, setCountry] = useState<string | undefined>(undefined)\n\n  //   useEffect(() => {\n  //     const handleFetchIp = async () => {\n  //       const res = await fetch('https://api.ipify.org?format=json')\n  //       if (res.ok) {\n  //         const { ip } = await res.json()\n  //         if (ip) setIp(ip)\n  //       }\n  //     }\n  //     handleFetchIp()\n  //   }, [])\n\n  const handleGetCountry = async () => {\n    setFetching(true)\n    const res = await fetch(`/api/${ip}`)\n    const data = await res.json()\n    if (data) {\n      console.log(data)\n      setCountry(data.country_name)\n    }\n    setFetching(false)\n  }\n\n  return (\n    <div>\n      <div>IP: {ip ? ip : ''}</div>\n      {country && <div>Country: {country}</div>}\n      <br />\n      {ip && (\n        <button disabled={fetching} onClick={handleGetCountry}>\n          {fetching ? 'Fetching' : 'Get Country'}\n        </button>\n      )}\n    </div>\n  )\n}\n\ninterface PageContext extends NextPageContext {\n  req: NextApiRequest\n  res: NextApiResponse\n}\n\nTestApp.getInitialProps = async ({ req, res }: PageContext) => {\n  const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress\n\n  return { ip }\n}\n\nexport default TestApp\n"]},"metadata":{},"sourceType":"module"}