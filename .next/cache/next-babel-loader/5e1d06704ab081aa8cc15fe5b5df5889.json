{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/paulvandyk/Projects/Kenai/ipinfo/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport { useState, useEffect } from 'react';\nexport default function TestApp() {\n  var _useState = useState('unset'),\n      ip = _useState[0],\n      setIp = _useState[1];\n\n  useEffect(function () {\n    var handleFetchIp = function handleFetchIp() {\n      var res, _ip;\n\n      return _regeneratorRuntime.async(function handleFetchIp$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch('https://api.ipify.org'));\n\n            case 2:\n              res = _context.sent;\n\n              if (!res.ok) {\n                _context.next = 11;\n                break;\n              }\n\n              console.log(res);\n              console.log(res.bodyUsed);\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(res.json());\n\n            case 8:\n              _ip = _context.sent;\n              debugger;\n              setIp(_ip);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    handleFetchIp();\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, \"IP: \", ip ? ip : 'unset'));\n}","map":{"version":3,"sources":["/Users/paulvandyk/Projects/Kenai/ipinfo/pages/index.tsx"],"names":["fetch","useState","useEffect","TestApp","ip","setIp","handleFetchIp","res","ok","console","log","bodyUsed","json"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA,kBACZF,QAAQ,CAAC,OAAD,CADI;AAAA,MACzBG,EADyB;AAAA,MACrBC,KADqB;;AAGhCH,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMI,aAAa,GAAG,SAAhBA,aAAgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACFN,KAAK,CAAC,uBAAD,CADH;;AAAA;AACdO,cAAAA,GADc;;AAAA,mBAEhBA,GAAG,CAACC,EAFY;AAAA;AAAA;AAAA;;AAGlBC,cAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAE,cAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,QAAhB;AAJkB;AAAA,+CAKDJ,GAAG,CAACK,IAAJ,EALC;;AAAA;AAKZR,cAAAA,GALY;AAMlB;AACAC,cAAAA,KAAK,CAACD,GAAD,CAAL;;AAPkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAUAE,IAAAA,aAAa;AACd,GAZQ,EAYN,EAZM,CAAT;AAcA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAUF,EAAE,GAAGA,EAAH,GAAQ,OAApB,CADF,CADF;AAKD","sourcesContent":["import fetch from 'isomorphic-unfetch'\nimport { useState, useEffect } from 'react'\n\nexport default function TestApp() {\n  const [ip, setIp] = useState('unset')\n\n  useEffect(() => {\n    const handleFetchIp = async () => {\n      const res = await fetch('https://api.ipify.org')\n      if (res.ok) {\n        console.log(res)\n        console.log(res.bodyUsed)\n        const ip = await res.json()\n        debugger\n        setIp(ip as any)\n      }\n    }\n    handleFetchIp()\n  }, [])\n\n  return (\n    <div>\n      <div>IP: {ip ? ip : 'unset'}</div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}